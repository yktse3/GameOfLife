window.GameOfLife=function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);class i{changeState(e){}isAlive(){}}class n extends i{changeState(e){return 2!==e||3!==e}isAlive(){return!0}}class s extends i{changeState(e){return 3===e}isAlive(){return!1}}class o{constructor(e,t){if(e<1||t<1)throw new Error(`{${e}, ${t}} coordinates provided is not valid.`);this.x=e,this.y=t,this.square=new s,this.neighbors=[]}click(){this.square=new n}isNeighbor(e){return!(this.x===e.x&&this.y===e.y||Math.abs(e.x-this.x)>1||Math.abs(e.y-this.y)>1)}addNeighbor(e){this.neighbors.push(e)}neighborCount(){return this.neighbors.length}equal(e){return this.x===e.x&&this.y===e.y}isAlive(){return this.square.isAlive()}changeState(){let e=this.neighbors.reduce((e,t)=>t.isAlive()?e++:e,0);return this.square.changeState(e)}nextState(){this.isAlive()?this.square=new s:this.square=new n}}t.default=class{constructor(e=0,t=0){if(e<=0||t<=0)throw new Error("Board must be at least 1x1");this.create(e,t)}create(e,t){this.buildCoordinate(e,t),this.defineNeighbors()}buildCoordinate(e,t){this.coordinates=[];for(let r=1;r<=e;r+=1)for(let e=1;e<=t;e+=1)this.coordinates.push(new o(r,e))}defineNeighbors(){this.coordinates.map(e=>(this.coordinates.map(t=>(e.isNeighbor(t)&&e.addNeighbor(t),!0)),!0))}getCoordinateAt(e,t){const r=new o(e,t),i=this.coordinates.filter(e=>e.equal(r));return 1===i.length?i[0]:null}frame(){let e=[];this.coordinates.forEach(t=>{t.changeState()&&e.push(function(){t.nextState()})}),e.forEach(e=>e())}}}]).default;